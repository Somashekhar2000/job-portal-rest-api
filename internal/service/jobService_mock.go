// Code generated by MockGen. DO NOT EDIT.
// Source: jobService.go
//
// Generated by this command:
//
//	mockgen -source=jobService.go -destination=jobService_mock.go -package=service
//
// Package service is a generated GoMock package.
package service

import (
	model "job-portal-api/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJobService is a mock of JobService interface.
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService.
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance.
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// CreateJobByCompanyId mocks base method.
func (m *MockJobService) CreateJobByCompanyId(jobdata model.NewJobs, cID uint) (model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobByCompanyId", jobdata, cID)
	ret0, _ := ret[0].(model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobByCompanyId indicates an expected call of CreateJobByCompanyId.
func (mr *MockJobServiceMockRecorder) CreateJobByCompanyId(jobdata, cID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobByCompanyId", reflect.TypeOf((*MockJobService)(nil).CreateJobByCompanyId), jobdata, cID)
}

// ProcessApplication mocks base method.
func (m *MockJobService) ProcessApplication(applications []model.NewUserApplication) []model.NewUserApplication {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessApplication", applications)
	ret0, _ := ret[0].([]model.NewUserApplication)
	return ret0
}

// ProcessApplication indicates an expected call of ProcessApplication.
func (mr *MockJobServiceMockRecorder) ProcessApplication(applications any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessApplication", reflect.TypeOf((*MockJobService)(nil).ProcessApplication), applications)
}

// ViewAllJobs mocks base method.
func (m *MockJobService) ViewAllJobs() ([]model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllJobs")
	ret0, _ := ret[0].([]model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllJobs indicates an expected call of ViewAllJobs.
func (mr *MockJobServiceMockRecorder) ViewAllJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllJobs", reflect.TypeOf((*MockJobService)(nil).ViewAllJobs))
}

// ViewJobByCompanyID mocks base method.
func (m *MockJobService) ViewJobByCompanyID(cID uint) ([]model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobByCompanyID", cID)
	ret0, _ := ret[0].([]model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobByCompanyID indicates an expected call of ViewJobByCompanyID.
func (mr *MockJobServiceMockRecorder) ViewJobByCompanyID(cID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobByCompanyID", reflect.TypeOf((*MockJobService)(nil).ViewJobByCompanyID), cID)
}

// ViewJobByJobID mocks base method.
func (m *MockJobService) ViewJobByJobID(jID uint) (model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobByJobID", jID)
	ret0, _ := ret[0].(model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobByJobID indicates an expected call of ViewJobByJobID.
func (mr *MockJobServiceMockRecorder) ViewJobByJobID(jID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobByJobID", reflect.TypeOf((*MockJobService)(nil).ViewJobByJobID), jID)
}
