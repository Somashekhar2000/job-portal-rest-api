// Code generated by MockGen. DO NOT EDIT.
// Source: companyService.go
//
// Generated by this command:
//
//	mockgen -source=companyService.go -destination=companyService_mock.go -package=service
//
// Package service is a generated GoMock package.
package service

import (
	model "job-portal-api/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockComapnyService is a mock of ComapnyService interface.
type MockComapnyService struct {
	ctrl     *gomock.Controller
	recorder *MockComapnyServiceMockRecorder
}

// MockComapnyServiceMockRecorder is the mock recorder for MockComapnyService.
type MockComapnyServiceMockRecorder struct {
	mock *MockComapnyService
}

// NewMockComapnyService creates a new mock instance.
func NewMockComapnyService(ctrl *gomock.Controller) *MockComapnyService {
	mock := &MockComapnyService{ctrl: ctrl}
	mock.recorder = &MockComapnyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComapnyService) EXPECT() *MockComapnyServiceMockRecorder {
	return m.recorder
}

// AddingCompany mocks base method.
func (m *MockComapnyService) AddingCompany(company model.AddCompany) (model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddingCompany", company)
	ret0, _ := ret[0].(model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddingCompany indicates an expected call of AddingCompany.
func (mr *MockComapnyServiceMockRecorder) AddingCompany(company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddingCompany", reflect.TypeOf((*MockComapnyService)(nil).AddingCompany), company)
}

// ViewAllCompanies mocks base method.
func (m *MockComapnyService) ViewAllCompanies() ([]model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllCompanies")
	ret0, _ := ret[0].([]model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllCompanies indicates an expected call of ViewAllCompanies.
func (mr *MockComapnyServiceMockRecorder) ViewAllCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllCompanies", reflect.TypeOf((*MockComapnyService)(nil).ViewAllCompanies))
}

// ViewCompanyById mocks base method.
func (m *MockComapnyService) ViewCompanyById(Id uint64) (model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanyById", Id)
	ret0, _ := ret[0].(model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanyById indicates an expected call of ViewCompanyById.
func (mr *MockComapnyServiceMockRecorder) ViewCompanyById(Id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanyById", reflect.TypeOf((*MockComapnyService)(nil).ViewCompanyById), Id)
}
